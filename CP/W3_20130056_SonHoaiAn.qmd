---
title: "Sơn Hoài Ân - 20130056"
format: html
---

# Initial-Value Problems for ODEs

## Euler's method

1. Theory
    This method gives us the way to calculate the integral of a function on an interval A = [a, b] by sum of all values of the function at each points on the interval. The points must be satisfied the distance between each points and insider the interval.

2. Algorithms 

```{pseudo}
FUNCTION EulerMethod(f, lower, upper, y0, step ):
    # set value to function processing
    x = lower

    # value of a function at an initial point
    y = y0
    
    # calculate length of step
    step_len = abs(upper - lower)/step

    # Loop over the number of steps
    FOR i FROM 0 TO n-1 DO:
        # Update y using Euler's formula
        y = y + step_len * f(x, y)
        
        # Update x
        x = x + step_len

    #return the result of y
RETURN y 
```
    
    If you want to return the series of results, you can modify the  function  above to get them all

3. Practice \

```{python}
def EulerMethod(func, lower, upper, seed, step):
    x = lower
    y = seed

    # length of step
    step_len = abs(lower - upper)/step

    # Loop and take sum of function values
    for i in range(step):
        # update the result
        y = y + step_len*func(x, y)

        # re-assign x
        x += step_len

    return y
```

4. Trials run 

    We will try to evaluate the function $f(x) =  x^2 + 5$ on the interval **[2, 4]** with 50 steps

```{python}
def EulerMethod(func, seed, lower, upper, step):
    x = lower
    y = seed

    # Loop and take sum of function values
    while x <= upper:
        # update the result
        y = y + step*func(x)

        # re-assign x
        x = x + step

    return y

f = lambda x: x**2 + 5
a = 2
b = 4
stp = 0.001
int_val = 0.0

res = EulerMethod(f, int_val, a, b, stp)
```

For this code above for the function $f(x) = x^2 + 5$, the program will be calculate the sum of function $f(x)$ from 2 to 4 with the initial value of zero (0)
## Higher - Order Taylor Methods

1. Theory \

    The Higher - order Taylor method is a nummerical method which is used to solve ODE by using approximation solutions based on Taylor's series. This method can provide better results and more accuracy when comparing to the lower - order methods as the Euler's method and its variations, etc. 

2. Algorithms \

    When using this method, we need to use the corresponding higher order of derivatives. In the psuedo below, we will try to see the second order Taylor method.

```{pseudo}
FUNCTION f(x)

FUNCTION f_second_diff(x)
    RETURN DIFF(f(x))

FUNCTION taylor_2nd(func, initial_val, lower, upper, step_len):
    
    ASSIGN:
        x = lover
        h = step_len
        y = initial_val


    DO:
        y = y + h*f(x) + (h^2/2)*f_second_diff(f(x))
        x += h
    WHILE(x <= upper)
    
DISPLAY:
    PRINT("The integration of the function y' = f(x) on the interval [lower, upper] is "y)
```

    $\hspace{10pt}$ In the algorithms above, the function will be calculate the second derivate of y via y' = f(x) then doing the calulation of the Taylor series over and over in the inteval of [a, b] to get the result of an integration of y'

3. Practice \
```{python}
import sympy as sp

# declare function
x = sp.symbols('x')
f = x**2 + 5

f_prime = sp.diff(f, x)

# declare variable for calculation
a = 2
b = 4
step_len = 0.001
y = 0 # initial value

# Higher Order methods Function (2nd order)
def Taylor2ndOrder(func, initial_val, lower, upper, distance):
    x0 = lower
    f_prime = sp.diff(func, x)
    y = initial_val

    while (x0 <= upper):
        y = y + distance*func.subs(x, x0) + (distance**2/2)*f_prime.subs(x, x0)
        x0 += distance

    return y

res = Taylor2ndOrder(f, y, a, b, step_len)
print(res)
```

## Runge - Kutta Methods

### Runggu - Kuta 1
### Euler Enhanced Metho-
### Rungu - Kuta 2
### Rungu - Kuta 3
### Rungu - Kuta 4